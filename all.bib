
@inproceedings{arnautov_scone:_2016,
	title = {\{{SCONE}\}: {Secure} {Linux} {Containers} with {Intel} \{{SGX}\}},
	shorttitle = {\{{SCONE}\}},
	url = {https://www.usenix.org/conference/osdi16/technical-sessions/presentation/arnautov},
	language = {en},
	urldate = {2018-12-02},
	author = {Arnautov, Sergei and Trach, Bohdan and Gregor, Franz and Knauth, Thomas and Martin, Andre and Priebe, Christian and Lind, Joshua and Muthukumaran, Divya and O'Keeffe, Dan and Stillwell, Mark L. and Goltzsche, David and Eyers, Dave and Kapitza, RÃ¼diger and Pietzuch, Peter and Fetzer, Christof},
	year = {2016},
	pages = {689--703},
	file = {Full Text PDF:/Users/tiffany/Zotero/storage/MKHPUCN6/Arnautov et al. - 2016 - SCONE Secure Linux Containers with Intel SGX .pdf:application/pdf;Snapshot:/Users/tiffany/Zotero/storage/LQ4U66KA/arnautov.html:text/html}
}

@inproceedings{checkoway_iago_2013,
	address = {New York, NY, USA},
	series = {{ASPLOS} '13},
	title = {Iago {Attacks}: {Why} the {System} {Call} {API} is a {Bad} {Untrusted} {RPC} {Interface}},
	isbn = {978-1-4503-1870-9},
	shorttitle = {Iago {Attacks}},
	url = {http://doi.acm.org/10.1145/2451116.2451145},
	doi = {10.1145/2451116.2451145},
	abstract = {In recent years, researchers have proposed systems for running trusted code on an untrusted operating system. Protection mechanisms deployed by such systems keep a malicious kernel from directly manipulating a trusted application's state. Under such systems, the application and kernel are, conceptually, peers, and the system call API defines an RPC interface between them. We introduce Iago attacks, attacks that a malicious kernel can mount in this model. We show how a carefully chosen sequence of integer return values to Linux system calls can lead a supposedly protected process to act against its interests, and even to undertake arbitrary computation at the malicious kernel's behest. Iago attacks are evidence that protecting applications from malicious kernels is more difficult than previously realized.},
	urldate = {2018-12-02},
	booktitle = {Proceedings of the {Eighteenth} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Checkoway, Stephen and Shacham, Hovav},
	year = {2013},
	keywords = {iago attacks, overshadow, system call},
	pages = {253--264},
	file = {ACM Full Text PDF:/Users/tiffany/Zotero/storage/2D7HBYZP/Checkoway and Shacham - 2013 - Iago Attacks Why the System Call API is a Bad Unt.pdf:application/pdf}
}

@inproceedings{chen_overshadow:_2008,
	address = {New York, NY, USA},
	series = {{ASPLOS} {XIII}},
	title = {Overshadow: {A} {Virtualization}-based {Approach} to {Retrofitting} {Protection} in {Commodity} {Operating} {Systems}},
	isbn = {978-1-59593-958-6},
	shorttitle = {Overshadow},
	url = {http://doi.acm.org/10.1145/1346281.1346284},
	doi = {10.1145/1346281.1346284},
	abstract = {Commodity operating systems entrusted with securing sensitive data are remarkably large and complex, and consequently, frequently prone to compromise. To address this limitation, we introduce a virtual-machine-based system called Overshadow that protects the privacy and integrity of application data, even in the event of a total OScompromise. Overshadow presents an application with a normal view of its resources, but the OS with an encrypted view. This allows the operating system to carry out the complex task of managing an application's resources, without allowing it to read or modify them. Thus, Overshadow offers a last line of defense for application data. Overshadow builds on multi-shadowing, a novel mechanism that presents different views of "physical" memory, depending on the context performing the access. This primitive offers an additional dimension of protection beyond the hierarchical protection domains implemented by traditional operating systems and processor architectures. We present the design and implementation of Overshadow and show how its new protection semantics can be integrated with existing systems. Our design has been fully implemented and used to protect a wide range of unmodified legacy applications running on an unmodified Linux operating system. We evaluate the performance of our implementation, demonstrating that this approach is practical.},
	urldate = {2018-12-02},
	booktitle = {Proceedings of the 13th {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Chen, Xiaoxin and Garfinkel, Tal and Lewis, E. Christopher and Subrahmanyam, Pratap and Waldspurger, Carl A. and Boneh, Dan and Dwoskin, Jeffrey and Ports, Dan R.K.},
	year = {2008},
	keywords = {cloaking, hypervisors, memory protection, multi-shadowing, operating systems, virtual machine monitors, VMM},
	pages = {2--13},
	file = {ACM Full Text PDF:/Users/tiffany/Zotero/storage/ILNLHKAK/Chen et al. - 2008 - Overshadow A Virtualization-based Approach to Ret.pdf:application/pdf}
}

@inproceedings{tsai_graphene-sgx:_2017,
	title = {Graphene-{SGX}: {A} {Practical} {Library} \{{OS}\} for {Unmodified} {Applications} on \{{SGX}\}},
	shorttitle = {Graphene-{SGX}},
	url = {https://www.usenix.org/conference/atc17/technical-sessions/presentation/tsai},
	language = {en},
	urldate = {2018-12-02},
	author = {Tsai, Chia-Che and Porter, Donald E. and Vij, Mona},
	year = {2017},
	pages = {645--658},
	file = {Full Text PDF:/Users/tiffany/Zotero/storage/8LJGM92A/Tsai et al. - 2017 - Graphene-SGX A Practical Library OS for Unmodif.pdf:application/pdf;Snapshot:/Users/tiffany/Zotero/storage/YS7SG9VY/tsai.html:text/html}
}

@article{fitzpatrick_distributed_2004,
	title = {Distributed {Caching} with {Memcached}},
	volume = {2004},
	issn = {1075-3583},
	url = {http://dl.acm.org/citation.cfm?id=1012889.1012894},
	abstract = {Speed up your database app with a simple, fast caching layer that uses your existing servers' spare memory.},
	number = {124},
	urldate = {2018-12-02},
	journal = {Linux J.},
	author = {Fitzpatrick, Brad},
	month = aug,
	year = {2004},
	pages = {5--}
}

@misc{noauthor_welcome!_nodate,
	title = {Welcome! - {The} {Apache} {HTTP} {Server} {Project}},
	url = {https://httpd.apache.org/},
	urldate = {2018-12-02},
	file = {Welcome! - The Apache HTTP Server Project:/Users/tiffany/Zotero/storage/WWYTD4VQ/httpd.apache.org.html:text/html}
}

@article{reese_nginx:_2008,
	title = {Nginx: {The} {High}-performance {Web} {Server} and {Reverse} {Proxy}},
	volume = {2008},
	issn = {1075-3583},
	shorttitle = {Nginx},
	url = {http://dl.acm.org/citation.cfm?id=1412202.1412204},
	abstract = {A leaner, meaner Apache.},
	number = {173},
	urldate = {2018-12-02},
	journal = {Linux J.},
	author = {Reese, Will},
	month = sep,
	year = {2008}
}

@misc{noauthor_redis_nodate,
	title = {Redis},
	url = {https://redis.io/},
	urldate = {2018-12-02},
	file = {Redis:/Users/tiffany/Zotero/storage/62C7N3E3/redis.io.html:text/html}
}

@inproceedings{schuster_beauty_2017,
	title = {Beauty and the {Burst}: {Remote} {Identification} of {Encrypted} {Video} {Streams}},
	shorttitle = {Beauty and the {Burst}},
	url = {https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/schuster},
	language = {en},
	urldate = {2018-12-02},
	author = {Schuster, Roei and Shmatikov, Vitaly and Tromer, Eran},
	year = {2017},
	pages = {1357--1374},
	file = {Full Text PDF:/Users/tiffany/Zotero/storage/USM4GTJV/Schuster et al. - 2017 - Beauty and the Burst Remote Identification of Enc.pdf:application/pdf;Snapshot:/Users/tiffany/Zotero/storage/6RS9F3IU/schuster.html:text/html}
}

@inproceedings{tsai_cooperation_2014,
	address = {New York, NY, USA},
	series = {{EuroSys} '14},
	title = {Cooperation and {Security} {Isolation} of {Library} {OSes} for {Multi}-process {Applications}},
	isbn = {978-1-4503-2704-6},
	url = {http://doi.acm.org/10.1145/2592798.2592812},
	doi = {10.1145/2592798.2592812},
	abstract = {Library OSes are a promising approach for applications to efficiently obtain the benefits of virtual machines, including security isolation, host platform compatibility, and migration. Library OSes refactor a traditional OS kernel into an application library, avoiding overheads incurred by duplicate functionality. When compared to running a single application on an OS kernel in a VM, recent library OSes reduce the memory footprint by an order-of-magnitude. Previous library OS (libOS) research has focused on single-process applications, yet many Unix applications, such as network servers and shell scripts, span multiple processes. Key design challenges for a multi-process libOS include management of shared state and minimal expansion of the security isolation boundary. This paper presents Graphene, a library OS that seamlessly and efficiently executes both single and multi-process applications, generally with low memory and performance overheads. Graphene broadens the libOS paradigm to support secure, multi-process APIs, such as copy-on-write fork, signals, and System V IPC. Multiple libOS instances coordinate over pipe-like byte streams to implement a consistent, distributed POSIX abstraction. These coordination streams provide a simple vantage point to enforce security isolation.},
	urldate = {2018-12-02},
	booktitle = {Proceedings of the {Ninth} {European} {Conference} on {Computer} {Systems}},
	publisher = {ACM},
	author = {Tsai, Chia-Che and Arora, Kumar Saurabh and Bandi, Nehal and Jain, Bhushan and Jannen, William and John, Jitin and Kalodner, Harry A. and Kulkarni, Vrushali and Oliveira, Daniela and Porter, Donald E.},
	year = {2014},
	pages = {9:1--9:14},
	file = {ACM Full Text PDF:/Users/tiffany/Zotero/storage/BM29RETD/Tsai et al. - 2014 - Cooperation and Security Isolation of Library OSes.pdf:application/pdf}
}

@inproceedings{kwon_strata:_2017,
	address = {New York, NY, USA},
	series = {{SOSP} '17},
	title = {Strata: {A} {Cross} {Media} {File} {System}},
	isbn = {978-1-4503-5085-3},
	shorttitle = {Strata},
	url = {http://doi.acm.org/10.1145/3132747.3132770},
	doi = {10.1145/3132747.3132770},
	abstract = {Current hardware and application storage trends put immense pressure on the operating system's storage subsystem. On the hardware side, the market for storage devices has diversified to a multi-layer storage topology spanning multiple orders of magnitude in cost and performance. Above the file system, applications increasingly need to process small, random IO on vast data sets with low latency, high throughput, and simple crash consistency. File systems designed for a single storage layer cannot support all of these demands together. We present Strata, a cross-media file system that leverages the strengths of one storage media to compensate for weaknesses of another. In doing so, Strata provides performance, capacity, and a simple, synchronous IO model all at once, while having a simpler design than that of file systems constrained by a single storage device. At its heart, Strata uses a log-structured approach with a novel split of responsibilities among user mode, kernel, and storage layers that separates the concerns of scalable, high-performance persistence from storage layer management. We quantify the performance benefits of Strata using a 3-layer storage hierarchy of emulated NVM, a flash-based SSD, and a high-density HDD. Strata has 20-30\% better latency and throughput, across several unmodified applications, compared to file systems purpose-built for each layer, while providing synchronous and unified access to the entire storage hierarchy. Finally, Strata achieves up to 2.8x better throughput than a block-based 2-layer cache provided by Linux's logical volume manager.},
	urldate = {2018-12-02},
	booktitle = {Proceedings of the 26th {Symposium} on {Operating} {Systems} {Principles}},
	publisher = {ACM},
	author = {Kwon, Youngjin and Fingler, Henrique and Hunt, Tyler and Peter, Simon and Witchel, Emmett and Anderson, Thomas},
	year = {2017},
	keywords = {File system, Multi-layer storage, Non-volatile memory},
	pages = {460--477},
	file = {ACM Full Text PDF:/Users/tiffany/Zotero/storage/3CTHUBET/Kwon et al. - 2017 - Strata A Cross Media File System.pdf:application/pdf}
}

@misc{noauthor_obliviate:_nodate,
	title = {{OBLIVIATE}: {A} {Data} {Oblivious} {Filesystem} for {Intel} {SGX} {\textbar} {Request} {PDF}},
	shorttitle = {{OBLIVIATE}},
	url = {https://www.researchgate.net/publication/323248534_OBLIVIATE_A_Data_Oblivious_Filesystem_for_Intel_SGX},
	abstract = {Request PDF on ResearchGate {\textbar} On Jan 1, 2018, Adil Ahmad and others published OBLIVIATE: A Data Oblivious Filesystem for Intel SGX},
	language = {en},
	urldate = {2018-12-02},
	journal = {ResearchGate},
	doi = {http://dx.doi.org/10.14722/ndss.2018.23296},
	file = {Full Text:/Users/tiffany/Zotero/storage/IW54V98B/OBLIVIATE A Data Oblivious Filesystem for Intel S.pdf:application/pdf;Snapshot:/Users/tiffany/Zotero/storage/KENE7HPM/323248534_OBLIVIATE_A_Data_Oblivious_Filesystem_for_Intel_SGX.html:text/html}
}

@inproceedings{hunt_ryoan:_2016,
	title = {Ryoan: {A} {Distributed} {Sandbox} for {Untrusted} {Computation} on {Secret} {Data}},
	shorttitle = {Ryoan},
	url = {https://www.usenix.org/conference/osdi16/technical-sessions/presentation/hunt},
	language = {en},
	urldate = {2018-12-10},
	author = {Hunt, Tyler and Zhu, Zhiting and Xu, Yuanzhong and Peter, Simon and Witchel, Emmett},
	year = {2016},
	pages = {533--549},
	file = {Full Text PDF:/Users/tiffany/Zotero/storage/Q3ZBNP27/Hunt et al. - 2016 - Ryoan A Distributed Sandbox for Untrusted Computa.pdf:application/pdf;Snapshot:/Users/tiffany/Zotero/storage/MC5TIUYL/hunt.html:text/html}
}

@inproceedings{yee_native_2009,
	title = {Native {Client}: {A} {Sandbox} for {Portable}, {Untrusted} x86 {Native} {Code}},
	shorttitle = {Native {Client}},
	doi = {10.1109/SP.2009.25},
	abstract = {This paper describes the design, implementation and evaluation of Native Client, a sandbox for untrusted x86 native code. Native Client aims to give browser-based applications the computational performance of native applications without compromising safety. Native Client uses software fault isolation and a secure runtime to direct system interaction and side effects through interfaces managed by Native Client. Native Client provides operating system portability for binary code while supporting performance-oriented features generally absent from Web application programming environments, such as thread support, instruction set extensions such as SSE, and use of compiler intrinsics and hand-coded assembler. We combine these properties in an open architecture that encourages community review and 3rd-party tools.},
	booktitle = {2009 30th {IEEE} {Symposium} on {Security} and {Privacy}},
	author = {Yee, B. and Sehr, D. and Dardyk, G. and Chen, J. B. and Muth, R. and Ormandy, T. and Okasaka, S. and Narula, N. and Fullagar, N.},
	month = may,
	year = {2009},
	keywords = {Application software, Assembly systems, binary code, browser-based applications, computer interfaces, hand-coded assembler, High performance computing, instruction set extensions, Internet, Java, Manuals, Native client, online front-ends, open architecture, operating system portability, Operating systems, Physics computing, Privacy, sandbox, Security, security of data, software fault isolation, software performance evaluation, thread support, untrusted x86 native code, Web application programming environments, World Wide Web, Yarn},
	pages = {79--93},
	file = {IEEE Xplore Abstract Record:/Users/tiffany/Zotero/storage/78LLU7PA/5207638.html:text/html;IEEE Xplore Full Text PDF:/Users/tiffany/Zotero/storage/3JIARU8Z/Yee et al. - 2009 - Native Client A Sandbox for Portable, Untrusted x.pdf:application/pdf}
}

@inproceedings{madhavapeddy_unikernels:_2013,
	address = {New York, NY, USA},
	series = {{ASPLOS} '13},
	title = {Unikernels: {Library} {Operating} {Systems} for the {Cloud}},
	isbn = {978-1-4503-1870-9},
	shorttitle = {Unikernels},
	url = {http://doi.acm.org/10.1145/2451116.2451167},
	doi = {10.1145/2451116.2451167},
	abstract = {We present unikernels, a new approach to deploying cloud services via applications written in high-level source code. Unikernels are single-purpose appliances that are compile-time specialised into standalone kernels, and sealed against modification when deployed to a cloud platform. In return they offer significant reduction in image sizes, improved efficiency and security, and should reduce operational costs. Our Mirage prototype compiles OCaml code into unikernels that run on commodity clouds and offer an order of magnitude reduction in code size without significant performance penalty. The architecture combines static type-safety with a single address-space layout that can be made immutable via a hypervisor extension. Mirage contributes a suite of type-safe protocol libraries, and our results demonstrate that the hypervisor is a platform that overcomes the hardware compatibility issues that have made past library operating systems impractical to deploy in the real-world.},
	urldate = {2018-12-10},
	booktitle = {Proceedings of the {Eighteenth} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Madhavapeddy, Anil and Mortier, Richard and Rotsos, Charalampos and Scott, David and Singh, Balraj and Gazagnaire, Thomas and Smith, Steven and Hand, Steven and Crowcroft, Jon},
	year = {2013},
	keywords = {functional programming, hypervisor, microkernel},
	pages = {461--472},
	file = {ACM Full Text PDF:/Users/tiffany/Zotero/storage/LNL9X9V7/Madhavapeddy et al. - 2013 - Unikernels Library Operating Systems for the Clou.pdf:application/pdf}
}